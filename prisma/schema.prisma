// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum TacticStyle {
  POSSESSION // Posse de bola
  COUNTER_ATTACK // Contra-ataque
  DEFENSIVE // Defensivo
  HIGH_PRESSURE // Press√£o alta
  LONG_BALL // Jogo direto
  BALANCED // Equilibrado
}

enum Formation {
  FOUR_THREE_THREE // 4-3-3
  FOUR_TWO_THREE_ONE // 4-2-3-1
  FOUR_FOUR_TWO // 4-4-2
  THREE_FIVE_TWO // 3-5-2
  FIVE_THREE_TWO // 5-3-2
  FOUR_ONE_TWO_ONE_TWO // 4-1-2-1-2 (losango)
}

enum Reputation {
  AMATEUR      // Small local tournaments with no major recognition
  REGIONAL     // Lower-tier cups within a country or continent
  NATIONAL     // National-level cups, like the FA Cup or Copa del Rey
  CONTINENTAL  // International cups within a continent (e.g., Champions League, Copa Libertadores)
  WORLDWIDE    // Highest level, like the FIFA World Cup or Club World Cup
}

model Coach {
  id          Int      @id @default(autoincrement())
  name        String
  titles      Int      @default(0)
  experiencie Int      @default(0)
  reputation  Int      @default(0)
  nationality String?
  tactics     TacticStyle?
  preferenceFormation Formation?
}


model Country {
  id          Int      @id @default(autoincrement())
  name        String
  continent   String

  cups Cup[]

  leagues League[]
}

model Cup {
  id             Int      @id @default(autoincrement())
  name           String
  teams_count    Int
  reputation     Reputation
  is_active      Boolean  @default(true)
  is_group_stage Boolean
  logo_cup       String?
  groups_count   Int
  image_trophy   String?
  award          Float

  country_id     Int

  country        Country @relation(fields: [country_id], references: [id], onDelete: Cascade)

  groups Group[]

  seasons Season[]
}

model Group {
  id             Int      @id @default(autoincrement())
  name           String
  teams_count    Int

  cup_id         Int
  cup            Cup  @relation(fields: [cup_id], references: [id], onDelete: Cascade)
}

model League {
  id             Int      @id @default(autoincrement())
  name           String
  knockout       Boolean
  reputation     Reputation
  is_active      Boolean @default(true)
  division_count Int

  country_id     Int
  country        Country @relation(fields: [country_id], references: [id], onDelete: Cascade)

  divisions Division[]

  seasons Season[]
}

model Division {
  id             Int      @id @default(autoincrement())
  name           String
  teams_count    Int
  division_logo  String?
  is_active      Boolean @default(true)
  image_trophy   String?
  division_order Int
  award          Float

  league_id      Int
  league         League @relation(fields: [league_id], references: [id], onDelete: Cascade)
}

model Season {
  id             Int      @id @default(autoincrement())
  year           Int
  is_active      Boolean
  winner         String?
  cup_id         Int?
  league_id      Int?

  cup            Cup? @relation(fields: [cup_id], references: [id])
  league         League? @relation(fields: [league_id], references: [id])
}