// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum TacticStyle {
  POSSESSION // Posse de bola
  COUNTER_ATTACK // Contra-ataque
  DEFENSIVE // Defensivo
  HIGH_PRESSURE // Pressão alta
  LONG_BALL // Jogo direto
  BALANCED // Equilibrado
}

enum Formation {
  FOUR_THREE_THREE // 4-3-3
  FOUR_TWO_THREE_ONE // 4-2-3-1
  FOUR_FOUR_TWO // 4-4-2
  THREE_FIVE_TWO // 3-5-2
  FIVE_THREE_TWO // 5-3-2
  FOUR_ONE_TWO_ONE_TWO // 4-1-2-1-2 (losango)
}

enum SeasonStatus {
  UPCOMING //temporada ainda não iniciada
  ONGOING // temporada em andamento
  FINISHED // temporada finalizada
  CANCELLED // temporada cancelada
  PAUSED // temporada pausada
}

enum ChampionshipFormat {
  LEAGUE      // Pontos corridos
  KNOCKOUT    // Mata-mata
  GROUP_STAGE // Fase de grupos seguida de mata-mata
  MIXED       // Combinação de liga e mata-mata
  ROUND_ROBIN // Todos jogam contra todos, podendo ter mais de um turno
}

enum ChampionshipType {
  NATIONAL      // Campeonato nacional
  INTERNATIONAL // Campeonato internacional
}

model Coach {
  id          Int      @id @default(autoincrement())
  name        String
  titles      Int      @default(0)
  experiencie Int      @default(0)
  reputation  Int      @default(0)
  nationality String?
  tactics     TacticStyle?
  preferenceFormation Formation?
}

model Season {
  id          Int      @id @default(autoincrement())
  year        Int      @default(30)
  status      SeasonStatus

  Championship Championship[]
}

model Championship {
  id          Int      @id @default(autoincrement())
  name        String
  format      ChampionshipFormat
  type        ChampionshipType
  teams_count Int    
  logo        String?
  is_active   Boolean    @default(true)
  relevance   Int?         // de 1 a 5

  season_id   Int?
  season      Season?    @relation(fields: [season_id], references: [id])

  ChampionshipTeam ChampionshipTeam[]
  divisions   Division[] @relation("ChampionshipDivisions")
}

model Division {
  id          Int      @id @default(autoincrement())
  name        String
  level       Int      @unique // Garante que não existam duas divisões com o mesmo nível
  
  championships Championship[] @relation("ChampionshipDivisions")
}

// model CoachHistory {
//   id         Int      @id @default(autoincrement())
//   coachId    Int
//   teamId     Int
//   startDate  DateTime // Quando o treinador assumiu o time
//   endDate    DateTime? // Quando o treinador saiu do time (null se ainda for o técnico)

//   coach      Coach    @relation(fields: [coachId], references: [id])
//   team       Team     @relation(fields: [teamId], references: [id])
// }


model ChampionshipTeam {
  id                Int      @id @default(autoincrement())
  championship_id   Int
  team_id           Int

  championship      Championship   @relation(fields: [championship_id], references: [id])
  team              Team           @relation(fields: [team_id], references: [id])
}

model Team {
  id                Int      @id @default(autoincrement())
  
  ChampionshipTeam ChampionshipTeam[]
}